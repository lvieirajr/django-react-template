version: "3.8"


# Defaults
x-defaults: &defaults
  restart: unless-stopped
  stdin_open: true
  tty: true

x-backend-defaults: &backend-defaults
  <<: *defaults
  build:
    context: ./backend/
    dockerfile: Dockerfile
    args:
      ENVIRONMENT: "dev"
  image: djangoreacttemplate/backend:latest
  env_file:
    - ./backend/.env
  volumes:
    - ./backend/:/app/:rw,cached

x-frontend-defaults: &frontend-defaults
  <<: *defaults
  build:
    context: ./frontend/
    dockerfile: Dockerfile
    args:
      ENVIRONMENT: "dev"
  image: djangoreacttemplate/frontend:latest
  env_file:
    - ./frontend/.env
  volumes:
    - ./frontend/:/app/:rw,cached
    - node_modules:/app/node_modules/:rw,cached
    - dist:/app/dist/:rw,cached


# Services
services:
  api:
    <<: *backend-defaults
    container_name: api
    command: ./bin/api-dev.sh
    ports:
      - "8000:8000"
    depends_on:
      - worker
      - postgres
      - redis

  worker:
    <<: *backend-defaults
    container_name: worker
    command: ./bin/worker-dev.sh
    depends_on:
      - worker-scheduler
      - postgres
      - redis

  worker-scheduler:
    <<: *backend-defaults
    container_name: worker-scheduler
    command: ./bin/worker-scheduler-dev.sh
    depends_on:
      - redis

  frontend:
    <<: *frontend-defaults
    container_name: frontend
    command: ./bin/dev.sh
    ports:
      - "3000:3000"

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data/:rw,cached
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis:/data/:rw,cached
    ports:
      - "6379:6379"


# Volumes
volumes:
  node_modules:
  dist:
  postgres:
  redis:
